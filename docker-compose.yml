version: '3.8'

services:
  # --- PostgreSQL Database Service ---
  patient-service-db:
    image: postgres:latest
    container_name: patient-service-db
    restart: unless-stopped
    ports:
      - "5000:5432" # Host:5000 (for local tools like pgAdmin), Container:5432
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password # IMPORTANT: CHANGE THIS!
    volumes:
      - patient-service-db-data:/var/lib/postgresql/data # Named volume for persistence
    networks:
      - internal_db_network # Connect to the custom internal network

  # --- Patient Service Application ---
  patient-service:
    build:
      context: ./patient-service # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile     # Name of the Dockerfile within that context
    image: patient-service:latest # The image tag you want to use for your app
    container_name: patient-service
    restart: unless-stopped
    ports:
      - "4000:4000" # Maps host port 4000 to container port 4000 (EXPOSEd in Dockerfile)
    environment:
      # Database connection properties 
      # IMPORTANT: Use the service name 'patient-service-db' as the hostname for inter-container communication
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      # Other Spring Boot properties (from the tutorial's Environment Variables)
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always # This might be a custom or specific property, keep it as is from tutorial
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - internal_db_network # Connect to the same internal network as the database
    depends_on:
      - patient-service-db # Ensure the database service starts before the application

  # --- Billing Service Application ---
  billing-service:
    build:
      context: ./billing-service # Path to the directory containing billing-service's Dockerfile
      dockerfile: Dockerfile     # Name of the Dockerfile within that context
    image: billing-service:latest # The image tag you want to use for your billing app
    container_name: billing-service
    restart: unless-stopped
    ports:
      - "4001:4001" # Main application port mapping
      - "9001:9001" # Secondary port mapping from the tutorial screenshot
    environment:
      # Database connection properties (assuming it connects to the same DB)
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      # Other Spring Boot properties, adjust as needed for billing-service
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Add other specific environment variables for billing-service here if the tutorial specifies them
    networks:
      - internal_db_network # Connect to the same internal network as the database
    depends_on:
      - patient-service-db # Ensure the database service starts before this application
      # If billing-service also needs patient-service to be up (e.g., calls its API), add it here:
      # - patient-service

  # --- Kafka Message Broker ---
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092" # Internal communication port
      - "9094:9094" # External communication port
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - internal_db_network # Connect to the same internal network
    volumes:
      - kafka-data:/bitnami/kafka # Persistent storage for Kafka data

# Define your custom networks
networks:
  internal_db_network:
    driver: bridge
    # internal: true # This was removed in your provided YML, so containers on this network will have external access

# Define your named volumes
volumes:
  patient-service-db-data:
    driver: local
  kafka-data:
    driver: local